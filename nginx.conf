worker_processes  2;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;


    log_format json_log escape=json '{"realip":"$remote_addr","@timestamp":"$time_iso8601","host":"$http_host","request":"$request","req_body":"$request_body","status":"$status","size":$body_bytes_sent,"ua":"$http_user_agent","req_time":"$request_time","uri":"$uri","referer":"$http_referer","xff":"$http_x_forwarded_for","ups_status":"$upstream_status","ups_addr":"$upstream_addr","ups_time":"$upstream_response_time"}';


    access_log  /var/log/nginx/access.log  json_log;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;
    client_max_body_size 10m;
    client_body_buffer_size 10m;

    #gzip  on;
    lua_need_request_body on;

    upstream ckb_rpc {
           server DEFAULT_CKR_RPC_IP:8114;
    }

    server {
      listen       80;
      server_name  localhost;
    location / {
      more_set_headers "Access-Control-Allow-Credentials: true";
      more_set_headers "Access-Control-Allow-Origin: *";
      more_set_headers "Access-Control-Allow-Headers: Accept,Authorization,authorization,Cache-Control,Content-Type,appkey";
      access_by_lua_block {
        local disable_methods = {"clear_banned_addresses","set_ban","set_network_active","add_node","remove_node","remove_transaction","clear_tx_pool"}
        local cjson = require "cjson"
        ngx.req.read_body()
        local body_data = ngx.req.get_body_data()
        if (body_data == nil) then
          ngx.exit(200)
        end

        local json_data = cjson.decode(body_data)
        local method = json_data["method"]
        if method == nil then
          for i,v in ipairs(json_data) do
            method = v["method"]
            for k,v in ipairs(disable_methods) do  
              if v == method then 
                ngx.status = ngx.HTTP_FORBIDDEN
                ngx.say("This method Access forbidden")
                ngx.exit(ngx.HTTP_FORBIDDEN)
              end
            end
          end
        else
          for k,v in ipairs(disable_methods) do
            if v == method then
              ngx.status = ngx.HTTP_FORBIDDEN
              ngx.say("This method Access forbidden")
              ngx.exit(ngx.HTTP_FORBIDDEN)
            end
          end
        end
      }
      proxy_pass http://ckb_rpc;
    }
  }
}

