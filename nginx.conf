worker_processes  2;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;


    log_format json_log escape=json '{"realip":"$remote_addr","@timestamp":"$time_iso8601","host":"$http_host","request":"$request","req_body":"$request_body","status":"$status","size":$body_bytes_sent,"ua":"$http_user_agent","req_time":"$request_time","uri":"$uri","referer":"$http_referer","xff":"$http_x_forwarded_for","ups_status":"$upstream_status","ups_addr":"$upstream_addr","ups_time":"$upstream_response_time"}';


    access_log  /var/log/nginx/access.log  json_log;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;
    client_max_body_size 10m;

    #gzip  on;
    lua_need_request_body on;

    upstream ckb_rpc {
           server YOUR_CKR_RPC_IP:8114;
    }

    server {
        listen       80;
        server_name  localhost;
    location / {
        access_by_lua_block {
            local cjson = require "cjson"
            local data = ngx.req.get_body_data()
            if (data == nil) then
                ngx.exit(200)
            end
            local table = cjson.decode(data)
            local method = table["method"]
            local tab = {"clear_banned_addresses","set_ban","set_network_active","add_node","remove_node","remove_transaction","clear_tx_pool"}
            for k,v in ipairs(tab) do
                if v == method then 
                  ngx.say("This method has been banned")
                  ngx.exit(200)
                end
            end
            }
        proxy_pass http://ckb_rpc;
        }
    }
}
